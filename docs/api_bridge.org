* Scenario
Kermit the Frog MD PhD, once his quality improvement project is approved
wants to have it live in the registry. This way others can search it and
see what he has done despite being green.
* Approver Implementation
** DONE Bridge module
CLOSED: [2016-08-05 Fri 16:32]
- [X] Use requests module to make the requests
- [X] mocking use settings.ini for endpoint
- [X] registry endpoints being built from settings.ini
- [X] models have in_registry property
- [X] Transfer models
** DONE Determine the signals that submit data when appropriate
CLOSED: [2016-08-05 Fri 11:33]
  + [X] Option 1: signals
    * [X] find right hooks
      * post save
    * [X] make sure that all_signals connects the signals on app ready
** DONE Api user
CLOSED: [2016-08-05 Fri 11:45]
- [X] fixtures contains the api user
- [X] constants file has right api username
- [X] pushdata grabs the username from constants to make those changes
** DONE Model natural key
CLOSED: [2016-08-09 Tue 13:33]
Models must contain a natural key in order for the registry database to
look up and add those related objects. [[https://docs.djangoproject.com/en/1.9/topics/serialization/][Search for "natural key".]] 
- [X] person natural key
- [X] project natural key
- [X] tags natural key
- [X] address natural key
** TODO Related object dependencies
Models cannot be added to a remote database if the foreign keys referenced
in related relationships do not correspond to an existing model in the
remote database.

So we make sure the natural key contains the most important information
about the related item. This way we can remake that item in the database

We need to make sure that models are creating GUID's and those are passed

That way we only need to look up that one thing in order to match and we
will always have the same object mapper

*** DONE GUID
CLOSED: [2016-09-01 Thu 10:03]
- [X] add guid generation to provenance
- [X] make sure natural keys pass guid as item 0
*** DONE option 3: create the item from the natural key if we have it
CLOSED: [2016-09-06 Tue 09:24]
- [X] pass over all adjacent models
- [X] natural key passes most important stuff with get_natural_dict
  - [X] tags
  - [X] person
  - [X] project
  - [X] address
** TODO Related object deserialization
Since we are serializing with natural_keys we need to define
how to reserialize. This will be needed in the registry as well

This is now easy, steps are as follows
1. lookup guid to see if already present. If so, use that model
2. If not create new model
** TODO Minimize saving to reduce load on registry
As of <2016-09-01 Thu> models are getting saved many times due to naive 
implementations. For instance, approver.utils.update_tags will save the
model being tagged and that will cause us to hit registry every time with
the full deserialized model.

This should help with redundant audit trail entries as well
*** TODO Scan through app with python webserver to find redundant saves
run the following command on the registry server to see # of requests
sudo python3 -m http.server 80
- [ ] fixed everywhere
  - [ ] fixed in about you post
  - [ ] fixed in project post
  - [ ] fixed in approval process
** TODO Save models at the proper time
- [ ] remove in_registry to something better
*** TODO Person
- [ ] updates registry when user changes their about you
*** TODO Project
- [ ] Stops updating the registry when not editable
*** TODO Tags
- [ ] On create
* Registry Implementation
** TODO Api endpoints
- [ ] make sure that passing the provenance from the other database does the right thing
** TODO Make sure that the Approver has to log in or verify its identity
